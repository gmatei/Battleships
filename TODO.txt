BACK END

- se conecteaza jucatorul -> este intrebat singleplayer sau multiplayer
	- singleplayer - cream jocul
	- multiplayer - se asteapta al doilea jucator si apoi cream jocul
	
clasa Game - 2 constructori -> se deschide cate o functie diferita in functie de singleplayer/multiplayer
0 - spatiu	inainte de lovire
1 - barca	inainte de lovire
2 - barca	dupa lovire
3 - spatiu	dupa lovire

CLIENT
- client pozitioneaza barcile (eventual astepti player 2) si trimite la server
- retine cele 2 matrice pe care le modifica in functie de comenzile trimise / primite de la server
- pana cand primeste de la server STOP + castigator 
- este intrebat daca vrea rematch sau nu

SERVER
- primeste numele
- primeste matricele de la jucatori
- retine cele 2 matrice pe care le modifica in functie de comenzile trimise / primite de la client
+ clasa player
- cand se termina jocul se trimite la client "STOP nume" + asteapta raspunsurile clientilor


Client : What's your name? <<String NAME>> 
	SinglePlayer (true)/MultiPlayer (false)? <<boolean MODE>> 
Client -> Server : <<NAME>> <<MODE>>

Client : Wait for opponent...
Server -> Client : Your opponent is <<OP_NAME>>  

Logica mutari
Client -> Server : tabla joc (matrice de int 10x10)		linii - numere     coloane - litere
Client : Wait for opponent...

Server -> Client : Starting game...

while(!gameOver)
{Server -> Client1 : "MOVE_Make your move"
Client1 -> Server : <<LetterDigit>>
if (boat_hit)
	{Server -> Client2 : "UPDATE_<<LetterDigit>>"
	Server -> Client1 : "HIT_<<LetterDigit>>"
	}
	else
	{
	Server -> Client2 : "UPDATE_<<LetterDigit>>"
	Server -> Client1 : "MISS_<<LetterDigit>>"
	changeCurrentPlayer();
	}
gameOver = isGameOver();
}

Server -> ClientWinner : "STOP_Winner"
Server -> ClientLoser  : "STOP_Loser"

Client1 & Client2 -> Server : "YES / NO"
  
if(bothYes)
	Server -> Client1 & Client2 : "Starting new game"
	goto LogicaMutari
	else
	Server -> Client1 & Client2 : "Ending game"

CLIENT


FRONT END





